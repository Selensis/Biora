// –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ (—è–∫–æ—Ä—è)
const anchorsConfig = [
    {
        id: 'morning-light',
        title: '–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç',
        description: '10-15 –º–∏–Ω—É—Ç –Ω–∞ —É–ª–∏—Ü–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è',
        icon: '‚òÄÔ∏è',
        time: '07:00', // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        completed: false
    },
    {
        id: 'first-meal',
        title: '–ü–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏',
        description: '–ó–∞–≤—Ç—Ä–∞–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è',
        icon: 'üçΩÔ∏è',
        time: '08:00',
        completed: false
    },
    {
        id: 'last-meal',
        title: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏',
        description: '–£–∂–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
        icon: 'üåô',
        time: '18:00',
        completed: false
    }
];

// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userState = {
    name: '–î—Ä—É–≥',
    chronotype: 'dove',
    wakeUpTime: '07:00',
    streak: 0,
    lastActiveDate: null,
    syncScore: 0
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadUserData();
    renderAnchors();
    updateUI();
    setupEventListeners();
    checkDayStreak();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
function loadUserData() {
    const savedData = localStorage.getItem('circadianUserData');
    if (savedData) {
        userState = {...userState, ...JSON.parse(savedData)};
    }
    updateUserInfo();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData() {
    localStorage.setItem('circadianUserData', JSON.stringify(userState));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI
function updateUserInfo() {
    document.getElementById('user-name').textContent = userState.name;
    
    const chronotypeNames = {
        'lark': '–ñ–∞–≤–æ—Ä–æ–Ω–æ–∫',
        'dove': '–ì–æ–ª—É–±—å',
        'owl': '–°–æ–≤–∞'
    };
    document.getElementById('user-chronotype').textContent = chronotypeNames[userState.chronotype];
    
    document.getElementById('streak-days').textContent = userState.streak;
    updateSyncScore();
}

// –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
function renderAnchors() {
    const container = document.querySelector('.anchor-cards');
    container.innerHTML = '';

    anchorsConfig.forEach(anchor => {
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
        let habitTime = calculateHabitTime(anchor.id, userState.wakeUpTime);
        
        const card = document.createElement('div');
        card.className = `anchor-card ${getAnchorStatus(anchor.id, habitTime)}`;
        card.innerHTML = `
            <div class="anchor-icon">${anchor.icon}</div>
            <div class="anchor-content">
                <div class="anchor-title">${anchor.title}</div>
                <div class="anchor-time">${habitTime} ‚Ä¢ ${anchor.description}</div>
            </div>
            <div class="anchor-checkbox" data-id="${anchor.id}">‚úì</div>
        `;
        container.appendChild(card);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
    document.querySelectorAll('.anchor-checkbox').forEach(checkbox => {
        checkbox.addEventListener('click', function() {
            const anchorId = this.getAttribute('data-id');
            toggleAnchorCompletion(anchorId);
        });
    });
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
function calculateHabitTime(anchorId, wakeUpTime) {
    const wakeUp = new Date(`2000-01-01T${wakeUpTime}:00`);
    
    switch(anchorId) {
        case 'morning-light':
            wakeUp.setMinutes(wakeUp.getMinutes());
            return wakeUp.toTimeString().substr(0, 5);
        case 'first-meal':
            wakeUp.setMinutes(wakeUp.getMinutes() + 60);
            return wakeUp.toTimeString().substr(0, 5);
        case 'last-meal':
            wakeUp.setHours(18, 0); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–∂–∏–Ω–∞
            return wakeUp.toTimeString().substr(0, 5);
        default:
            return '08:00';
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function getAnchorStatus(anchorId, habitTime) {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'pending' –¥–ª—è –≤—Å–µ—Ö
    return 'pending';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
function toggleAnchorCompletion(anchorId) {
    const anchor = anchorsConfig.find(a => a.id === anchorId);
    if (anchor) {
        anchor.completed = !anchor.completed;
        saveUserData();
        updateUI();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    const completedCount = anchorsConfig.filter(a => a.completed).length;
    document.getElementById('completed-anchors').textContent = completedCount;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —á–µ–∫–±–æ–∫—Å–æ–≤
    document.querySelectorAll('.anchor-checkbox').forEach(checkbox => {
        const anchorId = checkbox.getAttribute('data-id');
        const anchor = anchorsConfig.find(a => a.id === anchorId);
        if (anchor && anchor.completed) {
            checkbox.classList.add('checked');
        } else {
            checkbox.classList.remove('checked');
        }
    });
    
    updateSyncScore();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function updateSyncScore() {
    const totalAnchors = anchorsConfig.length;
    const completedAnchors = anchorsConfig.filter(a => a.completed).length;
    const score = totalAnchors > 0 ? Math.round((completedAnchors / totalAnchors) * 100) : 0;
    
    userState.syncScore = score;
    document.getElementById('sync-percent').textContent = `${score}%`;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressCircle = document.querySelector('.score-ring-progress');
    const circumference = 2 * Math.PI * 45;
    const offset = circumference - (score / 100) * circumference;
    progressCircle.style.strokeDasharray = `${circumference} ${circumference}`;
    progressCircle.style.strokeDashoffset = offset;
    
    saveUserData();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
function checkDayStreak() {
    const today = new Date().toDateString();
    const lastActive = userState.lastActiveDate;
    
    if (!lastActive) {
        userState.streak = 1;
    } else if (lastActive !== today) {
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        
        if (lastActive === yesterday.toDateString()) {
            userState.streak++;
        } else {
            userState.streak = 1;
        }
    }
    
    userState.lastActiveDate = today;
    saveUserData();
    updateUserInfo();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const modal = document.getElementById('settings-modal');
    const settingsBtn = document.getElementById('settings-btn');
    const closeBtn = document.querySelector('.close');
    const userForm = document.getElementById('user-form');

    settingsBtn.addEventListener('click', () => {
        modal.style.display = 'block';
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        document.getElementById('name').value = userState.name;
        document.getElementById('wake-up-time').value = userState.wakeUpTime;
        document.getElementById('chronotype').value = userState.chronotype;
    });

    closeBtn.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });

    userForm.addEventListener('submit', (event) => {
        event.preventDefault();
        
        userState.name = document.getElementById('name').value;
        userState.wakeUpTime = document.getElementById('wake-up-time').value;
        userState.chronotype = document.getElementById('chronotype').value;
        
        saveUserData();
        updateUserInfo();
        renderAnchors();
        
        modal.style.display = 'none';
    });
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Service Worker –¥–ª—è PWA
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js')
            .then(() => console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'))
            .catch(err => console.log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', err));
    });
}