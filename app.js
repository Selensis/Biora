// –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ (—è–∫–æ—Ä—è)
const anchorsConfig = [
    {
        id: 'morning-light',
        title: '–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç',
        description: '10-15 –º–∏–Ω—É—Ç –Ω–∞ —É–ª–∏—Ü–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è',
        icon: '‚òÄÔ∏è',
        time: '07:00',
        completed: false
    },
    {
        id: 'first-meal',
        title: '–ü–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏',
        description: '–ó–∞–≤—Ç—Ä–∞–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è',
        icon: 'üçΩÔ∏è',
        time: '08:00',
        completed: false
    },
    {
        id: 'hydration',
        title: '–£—Ç—Ä–µ–Ω–Ω—è—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è',
        description: '–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è',
        icon: 'üíß',
        time: '07:10',
        completed: false
    },
    {
        id: 'daylight-exposure',
        title: '–°–≤–µ—Ç –¥–Ω—è',
        description: '–ù–µ –º–µ–Ω–µ–µ 1 —á–∞—Å–∞ –ø—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏',
        icon: 'üîÜ',
        time: '12:00',
        completed: false
    },
    {
        id: 'movement',
        title: '–î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        description: '30 –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        icon: 'üö∂‚Äç‚ôÇÔ∏è',
        time: '15:00',
        completed: false
    },
    {
        id: 'digital-sunset',
        title: '–¶–∏—Ñ—Ä–æ–≤–æ–π –∑–∞–∫–∞—Ç',
        description: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞',
        icon: 'üìµ',
        time: '21:00',
        completed: false
    },
    {
        id: 'last-meal',
        title: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏',
        description: '–£–∂–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
        icon: 'üåô',
        time: '18:00',
        completed: false
    }
];

// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userState = {
    name: '–î—Ä—É–≥',
    chronotype: 'dove',
    wakeUpTime: '07:00',
    bedtime: '23:00',
    streak: 0,
    lastActiveDate: null,
    syncScore: 0
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadUserData();
    renderAnchors();
    updateUI();
    setupEventListeners();
    checkDayStreak();
    scheduleNotifications();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
function loadUserData() {
    const savedData = localStorage.getItem('circadianUserData');
    if (savedData) {
        userState = {...userState, ...JSON.parse(savedData)};
    }
    updateUserInfo();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData() {
    localStorage.setItem('circadianUserData', JSON.stringify(userState));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI
function updateUserInfo() {
    document.getElementById('user-name').textContent = userState.name;
    
    const chronotypeNames = {
        'lark': '–ñ–∞–≤–æ—Ä–æ–Ω–æ–∫',
        'dove': '–ì–æ–ª—É–±—å',
        'owl': '–°–æ–≤–∞'
    };
    document.getElementById('user-chronotype').textContent = chronotypeNames[userState.chronotype];
    
    document.getElementById('streak-days').textContent = userState.streak;
    updateSyncScore();
}

// –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
function renderAnchors() {
    const container = document.querySelector('.anchor-cards');
    container.innerHTML = '';

    anchorsConfig.forEach(anchor => {
        let habitTime = calculateHabitTime(anchor.id, userState.wakeUpTime, userState.bedtime);
        
        const card = document.createElement('div');
        card.className = `anchor-card ${getAnchorStatus(anchor.id, habitTime)}`;
        card.innerHTML = `
            <div class="anchor-icon">${anchor.icon}</div>
            <div class="anchor-content">
                <div class="anchor-title">${anchor.title}</div>
                <div class="anchor-time">${habitTime} ‚Ä¢ ${anchor.description}</div>
            </div>
            <div class="anchor-checkbox ${anchor.completed ? 'checked' : ''}" data-id="${anchor.id}">‚úì</div>
        `;
        container.appendChild(card);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
    document.querySelectorAll('.anchor-checkbox').forEach(checkbox => {
        checkbox.addEventListener('click', function() {
            const anchorId = this.getAttribute('data-id');
            toggleAnchorCompletion(anchorId);
        });
    });
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
function calculateHabitTime(anchorId, wakeUpTime, bedtime) {
    const wakeUp = new Date(`2000-01-01T${wakeUpTime}:00`);
    const bedTime = new Date(`2000-01-01T${bedtime}:00`);
    
    switch(anchorId) {
        case 'morning-light':
            return wakeUp.toTimeString().substr(0, 5);
        case 'hydration':
            wakeUp.setMinutes(wakeUp.getMinutes() + 10);
            return wakeUp.toTimeString().substr(0, 5);
        case 'first-meal':
            wakeUp.setMinutes(wakeUp.getMinutes() + 60);
            return wakeUp.toTimeString().substr(0, 5);
        case 'daylight-exposure':
            wakeUp.setHours(12, 0);
            return wakeUp.toTimeString().substr(0, 5);
        case 'movement':
            wakeUp.setHours(15, 0);
            return wakeUp.toTimeString().substr(0, 5);
        case 'last-meal':
            bedTime.setHours(bedTime.getHours() - 3);
            return bedTime.toTimeString().substr(0, 5);
        case 'digital-sunset':
            bedTime.setHours(bedTime.getHours() - 1);
            return bedTime.toTimeString().substr(0, 5);
        default:
            return '08:00';
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
function getAnchorStatus(anchorId, habitTime) {
    const now = new Date();
    const habitDateTime = new Date(`2000-01-01T${habitTime}:00`);
    const timeDiff = now.getHours() * 60 + now.getMinutes() - 
                    (habitDateTime.getHours() * 60 + habitDateTime.getMinutes());
    
    const anchor = anchorsConfig.find(a => a.id === anchorId);
    
    if (anchor && anchor.completed) {
        return 'completed';
    } else if (timeDiff > 120) { // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≤—ã—á–∫–∏
        return 'missed';
    } else {
        return 'pending';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
function toggleAnchorCompletion(anchorId) {
    const anchor = anchorsConfig.find(a => a.id === anchorId);
    if (anchor) {
        anchor.completed = !anchor.completed;
        saveUserData();
        updateUI();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showMotivationMessage(anchorId, anchor.completed);
    }
}

// –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function showMotivationMessage(anchorId, completed) {
    const messages = {
        'morning-light': completed ? 
            '–û—Ç–ª–∏—á–Ω–æ! –°–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç –∑–∞–ø—É—Å—Ç–∏–ª –≤–∞—à–∏ —Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã!' : 
            '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∏—Ç–º–æ–≤',
        'hydration': completed ?
            '–í–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è!' :
            '–£—Ç—Ä–µ–Ω–Ω—è—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –≤–∞–∂–Ω–∞ –¥–ª—è –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏–∏',
        'movement': completed ?
            '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏–ª–∞ –≤–∞—à—É —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∏–Ω—Å—É–ª–∏–Ω—É!' :
            '–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã',
        'digital-sunset': completed ?
            '–û—Ç–ª–∏—á–Ω–æ! –ú–µ–ª–∞—Ç–æ–Ω–∏–Ω —Å–º–æ–∂–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –±–µ–∑ –ø–æ–º–µ—Ö!' :
            '–°–∏–Ω–∏–π —Å–≤–µ—Ç –≤–µ—á–µ—Ä–æ–º –ø–æ–¥–∞–≤–ª—è–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∫—É –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–∞'
    };
    
    if (messages[anchorId]) {
        alert(messages[anchorId]);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    const completedCount = anchorsConfig.filter(a => a.completed).length;
    document.getElementById('completed-anchors').textContent = completedCount;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —á–µ–∫–±–æ–∫—Å–æ–≤
    document.querySelectorAll('.anchor-checkbox').forEach(checkbox => {
        const anchorId = checkbox.getAttribute('data-id');
        const anchor = anchorsConfig.find(a => a.id === anchorId);
        if (anchor && anchor.completed) {
            checkbox.classList.add('checked');
        } else {
            checkbox.classList.remove('checked');
        }
    });
    
    updateSyncScore();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function updateSyncScore() {
    const totalAnchors = anchorsConfig.length;
    const completedAnchors = anchorsConfig.filter(a => a.completed).length;
    const score = totalAnchors > 0 ? Math.round((completedAnchors / totalAnchors) * 100) : 0;
    
    userState.syncScore = score;
    document.getElementById('sync-percent').textContent = `${score}%`;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressCircle = document.querySelector('.score-ring-progress');
    const circumference = 2 * Math.PI * 45;
    const offset = circumference - (score / 100) * circumference;
    progressCircle.style.strokeDasharray = `${circumference} ${circumference}`;
    progressCircle.style.strokeDashoffset = offset;
    
    // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    if (score >= 80) {
        progressCircle.style.stroke = '#48bb78'; // –∑–µ–ª–µ–Ω—ã–π
    } else if (score >= 50) {
        progressCircle.style.stroke = '#ed8936'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    } else {
        progressCircle.style.stroke = '#e53e3e'; // –∫—Ä–∞—Å–Ω—ã–π
    }
    
    saveUserData();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
function checkDayStreak() {
    const today = new Date().toDateString();
    const lastActive = userState.lastActiveDate;
    
    if (!lastActive) {
        userState.streak = 1;
    } else if (lastActive !== today) {
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        
        if (lastActive === yesterday.toDateString()) {
            userState.streak++;
        } else {
            userState.streak = 1;
        }
    }
    
    userState.lastActiveDate = today;
    saveUserData();
    updateUserInfo();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function scheduleNotifications() {
    if ('Notification' in window && Notification.permission === 'granted') {
        anchorsConfig.forEach(anchor => {
            const habitTime = calculateHabitTime(anchor.id, userState.wakeUpTime, userState.bedtime);
            const [hours, minutes] = habitTime.split(':').map(Number);
            
            const now = new Date();
            const notificationTime = new Date();
            notificationTime.setHours(hours, minutes, 0);
            
            if (notificationTime > now) {
                const timeout = notificationTime - now;
                setTimeout(() => {
                    new Notification('Circadian Tracker', {
                        body: `–í—Ä–µ–º—è –¥–ª—è: ${anchor.title} - ${anchor.description}`,
                        icon: '/assets/icons/icon-192x192.png'
                    });
                }, timeout);
            }
        });
    }
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function requestNotificationPermission() {
    if ('Notification' in window) {
        Notification.requestPermission().then(permission => {
            if (permission === 'granted') {
                scheduleNotifications();
            }
        });
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const modal = document.getElementById('settings-modal');
    const settingsBtn = document.getElementById('settings-btn');
    const closeBtn = document.querySelector('.close');
    const userForm = document.getElementById('user-form');

    settingsBtn.addEventListener('click', () => {
        modal.style.display = 'block';
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        document.getElementById('name').value = userState.name;
        document.getElementById('wake-up-time').value = userState.wakeUpTime;
        document.getElementById('bedtime').value = userState.bedtime;
        document.getElementById('chronotype').value = userState.chronotype;
    });

    closeBtn.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });

    userForm.addEventListener('submit', (event) => {
        event.preventDefault();
        
        userState.name = document.getElementById('name').value;
        userState.wakeUpTime = document.getElementById('wake-up-time').value;
        userState.bedtime = document.getElementById('bedtime').value;
        userState.chronotype = document.getElementById('chronotype').value;
        
        saveUserData();
        updateUserInfo();
        renderAnchors();
        scheduleNotifications();
        
        modal.style.display = 'none';
    });

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if (!localStorage.getItem('notificationRequested')) {
        setTimeout(() => {
            requestNotificationPermission();
            localStorage.setItem('notificationRequested', 'true');
        }, 3000);
    }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Service Worker –¥–ª—è PWA
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js')
            .then(() => console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'))
            .catch(err => console.log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', err));
    });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(() => {
    renderAnchors();
}, 60 * 60 * 1000);
